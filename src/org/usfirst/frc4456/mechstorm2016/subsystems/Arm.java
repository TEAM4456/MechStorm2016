// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4456.mechstorm2016.subsystems;

import org.usfirst.frc4456.mechstorm2016.RobotMap;
import org.usfirst.frc4456.mechstorm2016.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.CANSpeedController.ControlMode;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Arm extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon singleArm = RobotMap.armsingleArm;
    //private final Encoder singleEnc = RobotMap.singleArmencoder;
    private double quadEncoderPos = singleArm.getEncPosition();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private int currentTargetIndex = 0;
    public static final double[] ARM_POSITIONS = {0, 2500, 4000, 5000}; 
    
	public Arm()
	{
		
		System.out.println("we r in Arm constructor");
		//this.singleArm = RobotMap.armsingleArm;;
		System.out.println("Arm.singleArm.getPIDSourceType():" + singleArm.getPIDSourceType());
		System.out.println("Arm.singleArm.getPinStateQuadIdx():" + singleArm.getPinStateQuadIdx());
		System.out.println("Arm.singleArm.getPosition():" + singleArm.getPosition());
		
		System.out.println("Arm.singleArm.getSetpoint():" + singleArm.getSetpoint());
		
		//singleArm.changeControlMode(TalonControlMode.Position);;
		//talon.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		//singleArm.setPID(.25, 0.000001, 0);
		//singleArm.setPosition(0);
		//singleArm.set(singleArm.get()); //talon1 will not move
		
		//piston1 = new DoubleSolenoid(id1_1, id1_2);
		//piston2 = new DoubleSolenoid(id2_1, id2_2);
	}
    
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void arm()
    {

    	RobotMap.armsingleArm.setPID(.7, 0.000001, 0);

    	RobotMap.armsingleArm.setPosition(0);

    	RobotMap.armsingleArm.set(RobotMap.armsingleArm.get()); 
    
    }
    public int getCurrentTargetIndex()
	{
		return currentTargetIndex;
	}
	
	public void moveNextTargetPosition()
	{
	    currentTargetIndex = currentTargetIndex + 1;
	    // by doing the modulo, we ensure that the target index is always 
	    // within the length of the array of arm positions (loops back to 0)
	    currentTargetIndex = currentTargetIndex % ARM_POSITIONS.length;
	    setIndex(ARM_POSITIONS[currentTargetIndex]);
	}
	
	public void moveHomePosition()
	{
	    // move back to the zeroth position in ARM_POSITIONS, and 
	    // reset the currentTargetIndex.
	    currentTargetIndex = 0;
	    setIndex(ARM_POSITIONS[currentTargetIndex]);
	}
	
/*	public void setIndex(double armPositions)
	{
		RobotMap.armsingleArm.set(200);
		}
   
		
		public void test()
    {
    	System.out.println(singleArm.getEncPosition());
    }
*/

		private void setIndex(double d) {
		// TODO Auto-generated method stub
		
	}


		@Override
		protected void initDefaultCommand() {
			// TODO Auto-generated method stub
			
		}
    
   /* public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	singleArm.pidWrite(singleArm.pidGet());
    	singleArm.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	//LiveWindow.addSensor("Arm", singleArm, quadEncoderPos);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void primaryFor() {
    	singleArm.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
    	singleArm.set(.50);
    }
    public void primaryBack() {
    	singleArm.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
    	singleArm.set(-.50);
    	//singleArm.changeControlMode(CANTalon.TalonControlMode.Position);
    }
    public void stoparm()	{
    	singleArm.set(0);
    	singleArm.changeControlMode(CANTalon.TalonControlMode.Position);
		System.out.println("stopArm.singleArm.getPosition():" + singleArm.getPosition());
		System.out.println("stopArm.singleArm.getDeviceId():" + singleArm.getDeviceID());
		System.out.println("stopArm.singleArm.getControlMode():" + singleArm.getControlMode());

    }
    //ROBOT NAME: TR-8R
    public void Display()
	{
		SmartDashboard.putNumber("Position", singleArm.getPosition());
		SmartDashboard.putNumber("Current", singleArm.getOutputCurrent());
		SmartDashboard.putNumber("Speed", singleArm.getSpeed());
	}
    
    public CANTalon getSingleArm()	{
    	return this.singleArm;
    }*/
	
}
